class Solution {
public:
    long long f(char source, char target, map<char, vector<pair<char, int>>>& mp, vector<vector<int>>& min_cost)
    {
        priority_queue<pair<int, char>, vector<pair<int, char>>, greater<pair<int, char>>> pq;
        pq.push({0, source});
        vector<int> c(26, INT_MAX);

        while (!pq.empty())
        {
            char ch = pq.top().second;
            int cost = pq.top().first;

            if (ch == target) return min_cost[source - 'a'][target - 'a'] = cost;//storing the result
            pq.pop();

            for (auto j : mp[ch])
            {
                char newch = j.first;
                int newCost = j.second;

                if (cost + newCost < c[newch - 'a'])
                {
                    c[newch - 'a'] = cost + newCost;
                    pq.push({cost + newCost, newch});
                }
            }
        }

        return -1;
    }

    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        map<char, vector<pair<char, int>>> mp;
        int n = original.size();
        int m = source.size();

        for (int i = 0; i < n; i++) mp[original[i]].push_back({changed[i], cost[i]});
        long long ans = 0;
        bool fl = false;
        vector<vector<int>> min_cost(26, vector<int>(26, INT_MAX));

        for (int i = 0; i < m; i++)
        {
            if (source[i] != target[i])
            {
                if (min_cost[source[i] - 'a'][target[i] - 'a'] != INT_MAX)
                {
                    ans += min_cost[source[i] - 'a'][target[i] - 'a'];
                    continue;
                }

                long long val = f(source[i], target[i], mp, min_cost);
                if (val == -1)
                {
                    fl = true;
                    break;
                }

                ans += val;
            }
        }

        if (fl) return -1;
        return ans;
    }
};
